sqlyog试用版只能使用15天，可以每次更改注册表继续使用，HKEY_CURRENT_USER-->SOFTWARE，一般为第一项，有一个inD值，这个值保留了sqlyog的使用日期信息，可以直接删除这项值，删除后重启sqlyog，会再自动生成此值。
sqlyog中执行某一行时，
如果这一行结尾有分号，要把光标放到分号左边(内侧)。
即，执行单行语句时，执行的是光标所在位置的前一个分号到下一个分号之间的语句。
本机上mysql用户名root  密码litchi
mysql连接端口默认为3306

安装好mysql后，mysql自带了6个数据库。
information_schema、mysql、performance_schema、sakila、sys、world。
information_schema是信息数据库，是一个虚拟的数据库，保存着MySQL服务器所维护的其他所有数据库的信息，
mysql，是MySQL的核心数据库，主要负责存储数据库的用户、权限设置、关键字等MySQL自己需要使用的控制和管理信息。不可以删除。
performance_schema，要用于收集数据库服务器性能参数。
sys，系统数据库，可以快速的了解系统的元数据信息。
world，sakila是两个测试数据库，里边有许多供测试的数据。

在cmd中运行mysql：
1.在cmd命令行中，切换到mysql.exe所在的目录下，
mysql -h 主机名 -u 用户名 -p     回车后输入密码，来登录mysql，登录本机的mysql，-h参数可以省略。
2. mysql退出；在命令行中，退出mysql有三种方式，'exit' , 'quit'和'\q'。'mysql>'提示符后面输入'exit'或'quit''\q'或退出，（注意：mysql语句要以分号';'结束，如果不加分号，命令提示符会以 -> 提示继续输入)。在'->'提示符后面exit和quit失效，输入分号';'结束语句或输入'\q'退出（'\q'通用）。

python连接mysql：
python连接MySQL，要遵守DB API 2.0 规范。要安装第三方库来连接mysql，有以下接口：
1，mysql-python（mysql for python），也就是MySQLdb；c语言写的，速度比较快。
2，PyMySQL，支持jython，IronPython，CPython等；
3.MySQL Connector/Python。是纯python实现的MySQL接口，由Oracle维护；mysql官方提供。
4，mxODBC 和 mxODBC Connect。
5，pyodbc。需进入http://code.google.com；
6，mypysql。由c语言实现，目前还不能完全实现PEP249规范；
7，PyPyODBC。支持PyPy； 

目前mysql-connect不支持python3.5，我安装的是pymysql。
还可以用对象关系映射（ORM，Object-Relational Mapping）工具，把关系数据库的表结构映射到对象上（类），用 Peewee或sqlalchemy。
我已经安装了pymysql。
导入pymysql， import pymysql

数据库操作SQL语句：
基本语句
1.创建数据库：create database 数据库名 [其他选项]
如：   create database user_db character set gbk
通过 character set gbk 将数据库字符编码指定为 gbk，
如果使用普通用户登录的，创建或删除数据库时可能会需要某些权限，最好直接使用root用户操作。
可以使用mysqladmin来创建数据库，mysqladmin是MySQL数据库的一个管理工具。
mysqladmin -u root -p create user_db
2.删除数据库：drop database 数据库名;
3.选择数据库：
1).在登录时指定：mysql -D 选择的数据库名 -h 主机名 -u 用户名 -p
2). use 数据库名
4.show databases; 命令查看已经创建的数据库
5.设置密码
1). 如果安装时没有设置密码，设置初始密码：
update mysql.user set password =password('密码') where user = 'root' ;
FLUSH PRIVILEGES;
mysql自带的数据库'mysql'数据库中存储着用户数据等信息，可以更改'mysql'数据库中的'user'中的数据来更改密码。已经设置密码要修改密码时的操作语句与上面相同。
mysql设置新用户或更改密码后，需要用flush privileges;语句来刷新mysql的系统权限相关表，否则会出现拒绝访问。还有一种方法，可以重新启动mysql，来使设置生效。
2).  用root账户登陆进去后，设置密码：
set password = password('密码');
FLUSH PRIVILEGES;
3). 用mysqladmin设置密码：
mysqladmin -u root password "密码" ;

6.数据库的基本数据类型：
基本数据类型可以分为三类：数值类型，字符串类型，日期类型。
数值类型：整数: tinyint、smallint、mediumint、int、bigint
浮点数: float、double、real、decimal


字符串类型:char,varchar等

字符串：char和varchar类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。
binary和varbinary类似于char和varchar，不同的是它们包含二进制字符串而不是非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值。
二进制：blob是一个二进制大对象，可以容纳可变数量的数据。有4种blob类型：tinyblob、blob、mediumblob和longblob。它们只是可容纳值的最大长度不同。
文本：有4种text类型：tinytext、text、mediumtext和longtext。这些对应4种blob类型，有相同的最大长度和存储需求。
日期类型：date,time,year,datetime,timestamp等

7.创建表
1).create table 表名称 (列声明)
列声明包括列的名称、数据类型、约束等，多个列声明之间用逗号隔开。
create table tableName （columnName 数据类型 [约束]）约束可省。
如：create table student （id int AUTO_INCREMENT primary key）
如果主键是int型，应该设置'自增'AUTO_INCREMENT。
若是要将主键作用于一组列，如下:
create table tableName (
             columnName1 column_type,
             columnName2 column_type,
             columnName3 column_type,
        primary key(columnName1,columnName2)
             );
2).创建临时表：
使用temporary关键字
create temporary table 表名 (列声明)
使用了temporary关键字，临时表在当前连接下才是可见的，当关闭这个连接这个临时表就会销毁（当然也可以手动销毁），所以，不同连接可以有相同名称的临时表；临时表名称也可以与已存在的非临时表名称相同，相同名称的非临时表会被隐藏，直到临时表被销毁。
手动销毁临时表与删除非临时表操作语句相同：
drop table tableName;
3). 在另一个表的基础上建表
在建表语句后面添加select语句。
create table tableName1 (......) select * from tableName2 ;
新建的表会基于另一个表创建，新添加的'列'排在旧表的左边。
4).  复制表
create table tableName ........ select .........是一种复制表的方法
用 as复制表，即用as select：
create table A as select * from B 
使用like关键字复制表：
create table tableName1 like tableName2;
tableName1会有与tableName2表相同的表结构。

like、select、as复制表的区别：
like相当于复制表的创建语句，复制了表的字段结构和索引，但是没有复制表的数值。
select复制表的全部数据，但无法复制表的索引
as与select相同。
5).创建表时用 if not exists 关键字可以防止与已存在的表发生冲突。
create table if not exists tableName (......) ;


数据库表的约束：
约束用于限制加入表的数据的类型。
主要约束有：PRIMARY KEY（主键约束）、FOREIGN KEY（外键约束）、NOT NULL（非空约束）、UNIQUE（唯一约束）、CHECK、DEFAULT等
1.PRIMARY KEY（主键约束）
每个表都应该有一个主键（但不是强制，有个主键在查找排序等操作时会很方便），每个表只能有一个主键。
但是，主键可以作用于一组列。
主键：唯一、非NULL。
删除一个表时，如果这个表是另一个表的外键表，那么要先删除外键表或先解除外键关联才能删除这个表。
1). 创建表时添加主键约束，
为单列添加主键约束：
create table tableName(
  columnName1  int auto_increment primary key
)
为多列（或单列）添加主键约束：
create table tableName(
  columnName1  int auto_increment ,
  columnName2 ...... ,
  primary key(columnName1,columnName2)
)
使用constraint关键字为主键约束命名：
create table tableName(
  columnName1  int auto_increment ,
  columnName2 ...... ,
  constraint  pk_Name  primary key(columnName1,columnName2)
)

2). 创建表之后添加主键约束(使用alter关键字)：
为单列添加主键约束：
alter table tableName add primary key (columnName);
为多列添加主键约束以及为主键约束命名：
alter table tableName add constraint pk_Name primary key (columnName1,columnName2);
注意：使用alter table 关键字为表添加主键约束时，必须保证要添加主键约束的列已声明为非NULL。
3).撤销主键约束
alter table tableName drop primary key;

2.FOREIGN KEY（外键约束）
外键用来连接两个表，一个表与另一个表相连，来保持数据的一致性。
一个表的外键是另一个表的主键。
外键，可以重复，可以为NULL值。
外键的取值只能是它引用的主键中的值或NULL值。
一个表可以有多个外键，一个外键可以包含多个列。
添加外键关系的两个列的数据类型必须是相类似、可以相互转换的。
1). 在创建表同时添加外键：
为单列添加外键：
create table tableName (
    columnName1  int  ,
    columnName2  char ,
    foreign key (columnName1) references tableB (columnB)
)
为多列（或单列）添加外键以及为外键命名：
create table tableName (
    columnName1  int  ,
    columnName2  char ,
    constraint  fk_Name  foreign key (columnName1,columnName2) references tableB (columnB)
)

2). 创建表之后添加外键：
为单列添加外键约束：
alter table tableName add foreign key (columnName1) references tableB(columnB) ;
为多列/单列添加外键约束以及为外键命名：
alter table tableName add constraint fk_Name foreign key (columnName1) references tableB(columnB) ;

3).  撤销外键：
alter table tableName drop foreign key fk_Name ;
3.NOT NULL（非空约束）
1).创建表时添加非空约束：
create table tableName (
    columnName1 int not null,
    columnName2 varchar not null
) ;
2). 创建表之后添加非空约束：
alter table tableName modify  columnName 数据类型  not null ;
modify关键字用来改变列属性，所以要同时给出列新的'数据类型'、约束等。
change关键字与modify关键字类似，但是change关键字需要给出列的重命名（不改名称时新名旧名一样）如：  alter table tableName change oldName  newName int not null ;
3).  取消非空约束：
alter table tableName modify columnName 数据类型 NULL ;
4.UNIQUE（唯一约束）
1).创建表时添加唯一约束：
为单行添加唯一约束：
create table tableName (
    columnName1  int unique
) ;
为多行/单行添加唯一约束以及为唯一约束命名：
create table tableName ( 
    columnName1 int ,
    columnName2 varchar,
    //unique(columnName1,columnName2),
    constraint uc_Nmae unique (columnNmae1,columnName2)
);
2).创建表之后添加唯一约束：
添加唯一约束：
alter table tableName add unique (columnName1，columnName2);
或者用modify关键字（只能修改单行）：
alter table tableName modify columnName 数据类型  unique ;
为约束命名：
alter table tableName add constraint uc_Name unique (columnNames)
3). 撤销唯一约束：
alter table tableName drop index uc_Name ;
5.CHECK
check约束用于限制列中的取值范围。
mysql中会对所有check字句进行检查，但会直接忽略。也就是说mysql会检查插入/修改的值是否符合check约束，但即使不符合也不会报错，因为直接忽略了。
1).创建表时创建check约束：
为单列添加check：
create table tableName(
    column1 int check(column1>0)
) ;
为单列或多列添加check：
create table tableName(
    column1 int ，
    column2 int，
    check(column1>0 and column2<=0)
) ;
为check约束命名：
create table tableName(
    column1 int ，
    column2 int，
    constraint  ck_Name check (column1>0 and column2<=0
)
) ;
2).  创建表之后添加check约束：
alter table tableName add check (column1>0);
为多列添加check以及命名：
alter table tableName add constraint ck_Name check (column1>0 and column2<=0)
3). 撤销check约束：
alter table tableName drop check ck_Name ；
6.DEFAULT
使用default关键字设置默认值
1).  创建表时添加默认值：
create table tableName(
    column1 int  default 0，
    column2 varchar default 'abc'，
    dateColumn date DEFAULT GETDATE()
) ;
添加整型默认值时，直接给出；添加字符型时，用单引号括起来。
也可以添加函数作为默认值。
2). 创建表之后添加默认值：
alter table tableName alter columnName set default  值 ;
3).  撤销默认值：
alter table tableName alter columnName drop default ;

增删查改等操作：
1.查询：
1). select 、where等基本语句
2). 查看表的字段信息：desc 表名;
3). 查看表的所有信息（会显示表的创建语句）：
show create table 表名;
4). 
5).
6).
7).
8).
2.修改：
1). 修改表名：
alter table 旧表名 rename 新表名; 
2). 修改列名： alter table tableName change oldName newName 列属性;
3). 修改列属性（修改 列名、数据类型、约束）： 
alter table 表名 modify 列名 新属性；
或用change 关键字（需要给出重命名）：
alter table 表名 modify 旧列名 新列名 新属性；
（如果不改列名，新旧列名一样）
修改约束的语句可以查看上面约束部分。
4). 修改值：
使用update关键字。
update 表名 set 字段名1=值 , 字段名2=值 ; 
#注意，这一列的所有条目的值都会被更改。
或：
update 表名 set 字段名1=值 , 字段名2=值 where .... ;

alter是修改(增删改)列的结构，如表名、列名、列数据类型和约束，添加删除列等；update是更新表中的数值。

5).

3.添加：
1).  添加列：
alter table tableName add column columnName 列属性;
2). 向表中插入值：
insert语句。
insert into 表名 (字段名1，字段名2，...) values (字段1值，字段2值);
也可以一次插入多行值：
insert into 表名 (字段名1，字段名2，...) values (字段1值，字段2值),(字段1值，字段2值);  多行值之间用逗号隔开。
字段名可以省略：
insert into 表名 values (字段1值，字段2值);
此时因该按照数据表中的字段顺序给出值。
设置了自增的列不用传值，会自动填充。
设置了默认值的字段，可以将值设置为 default，会自动使用是设置的默认值。
使用set关键字插入值：
insert into 表名 set 字段名1=值 , 字段名2=值 ;
3). 使用update关键字修改值：
update 表名 set 字段名1=值 , 字段名2=值 ;
或：
update 表名 set 字段名1=值 , 字段名2=值 where .... ;
4). select into 语句
select into 语句用于从一个表中选取数据插入另一个表中。
select * into table2  from table1
将table1中的某些数据插入table2中。
也可以将数据插入到另一个数据库的表中。用in操作符。
select * into table2 in 'DBName' from table1 ;
将table1的某些数据插入到DBName数据库中的table2表中。
5).

4.删除：
1).删除数据库：drop database 数据库名;
2).删除表：  drop table tableName;
或  drop table if exists tableName;
3). 删除列 ：alter table tableName drop column columnName; 
删除列的结构（列被完全删除）。
4). 删除行：
delete关键字删除表中的行。
delete from 表名 where 列名=值 ; 
delete关键字可以在不删除表的情况下删除表中的所有数据，即只删除数据，表结构还是完整的。如下：
delete from 表名 ;
或：
delete * from 表名 ;
5). 删除约束，查看上面约束部分。
6).
7).

mysql的存储引擎：
数据库的存储引擎决定了表在计算机的存储方式。
不同的数据库对数据的操作不同，例如有的需要快速读取，有的需要快速写入，有的表数据比较密集，有的需要支持事务。可以根据不同的操作需求选择不同的存储引擎。不同存储引擎对于各种操作的效率不同。
mysql支持许多存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。如：MyISAM、InnoDB、MERGE、MEMORY(HEAP)、BDB(BerkeleyDB)、EXAMPLE、FEDERATED、ARCHIVE、CSV、BLACKHOLE  等。其中InnoDB和BDB提供事务安全表，其它存储引擎都是非事务安全表。
MySQL5.5以后默认使用InnoDB存储引擎。

1).若要修改默认引擎，可以修改配置文件my.ini中的default-storage-engine 。
2).查看当前数据库的默认引擎：
show variables like 'default_storage_engine' ;
3).查看当前数据库支持的引擎：
show engines ; 
或：
show variables like 'have%' ;
4). MySQL5.1以后，INFORMATION_SCHEMA数据库中存在一个ENGINES的表，它提供的信息与show engines;语句的查询结果完全一样，
查看哪些存储引擎支持事物处理：
select engine from information_chema.engines where transactions = 'yes';
5). 查看指定表所使用的引擎：
show table status from 表所在的数据库名 ;
修改数据库的存储引擎：
1). 修改配置文件my.ini中的default-storage-engine 。在[mysqld]下，更改   default-storage-engine=引擎名称。
2). 创建表时给表指定存储引擎：
用type或engine关键字。如：
create table tableName(
    ......
)type=InnoDB ;
3). 创建表之后更改存储引擎：
alter table tableName type=InnoDB ;

mysql事务：
必须确保当前使用的存储引擎支持事务才能使用事务。
一个事务是一组连续的数据库操作，即一组sql语句（事务用来管理insert、update、delete语句）。
事务用start transaction/begin、commit、rollback实现。
开始时输入start transaction 或 begin 开始一个事务；
然后输入要执行的sql语句；
如果以上sql语句全部执行成功，输入commit提交到数据库；
如果出现问题，只要有一个sql语句执行出错，就要rollback。
可以建立保存点：
save point 保存点名;
rollback to 保存点名; 
就可以回滚到保存点。保存点之前的事务被提交，之后的会被忽略。
一个事务可以确保一组语句要么全部执行成功，要么全部失败（只要有一个语句执行失败，就要执行rollback）。

关于commit：
当使用事务时，就要使用commit（有增删改操作，并且没有开启自动提交，就要手动commit）。
需不需要commit，要看使用的存储引擎是什么，如果是不支持事务的存储引擎，是否commit都没有效果；如果是支持事务的存储引擎，需要看是否开启了自动commit。查看是否开启自动commit：
show variables like '%autocommit%' ;
关闭自动提交：   set autocommit=0    
开启自动提交：    set autocommit=1 

建立索引
当数据库的数据量很大时，检索会变得很慢，这是就要进行优化，建立索引时进行优化的最基本方法。
索引是在存储引擎中实现的，不是在服务器层实现的，所以每种存储引擎的索引类型都不一样，并不是所有存储引擎都支持所有索引类型。
1.建立普通索引
1).  create index  index_name on tableName(columnName) 
这个索引允许一列中出现重复值。
2).  建立唯一索引，同一列中不能出现重复值：
create unique index  index_name on tableName(columnName) 
2.创建表时建立索引
create table tableName(
column1 ...... ,
column2 ...... ,
index  index_name (column1)
)
3. 创建表之后添加索引
alter table tableName add index index_name on (columnName) ;
4. 
5. 
6. 

通配符
%                        匹配一个或多个字符
_ 或  .                  匹配任何单个字符
^abc                  匹配以^后面的字符开头的字符
$abc                   匹配以$后面的字符结尾的字符 
[charlist]             匹配[..]中的任何单个字符
[^charlist]          不匹配[..]中的任何单个字符
[!charlist]            同[^charlist] 
[a-z][0-9]等         用' - '表示匹配范围
[0-9]* 或 a*等      *匹配0个或多个在*前面的字符

运算符/操作符
1). and  or  not （&& 和 || 和 ！）
and 和 or 运算符可以把where子句（或其他语句）中的多个条件结合起来。and和or可以一块使用。
2).  regexp 用来匹配正则表达式
expr  regexp  正则表达式;  
如果expr匹配正则表达式则返回1，如果不匹配，则返回0。
如：
select 'abc' regexp '[a-z]*' , '123' redexp [0-9] ;
注意：待匹配字符串和正则表达式都要用单引号括起来。
3).  in 
in操作符可以在where子句中规定多个值。
select * from tableName where columnName in (value1,value2,......) ;
4).  like
like操作符可以在where子句中搜索指定模式的列。
select * from tableName where columnName like  pattern ;
pattern类似于正则表达式，该select会列出符合条件的。如：
select * from table1 where column1 like 'ABC%' ;
5).  between
between A and B 会选取介于A和B之间的数值，这些值可以是数值、文本、日期等。
注意：这里 'B' 能否取到取决于所使用的数据库，不同数据库对于这个值的取舍有差异，mysql会包含这个值。
not between A and B 
select * from tabel1 where column between 'ab' and 'jk' ;
会选取列中值开头字母在'ab'和'jk'之间的，不区分大小写。
6). 算数运算符
 '+'、'-'、'*'、'/'、'%' 
如果除法中除数为0，则结果为null。
div相当于'/'，4 div 2  ；
mod(m,n)相当于'%' ,    m%n  ;
7).  比较运算符
'='、'<=>'、'<'、'>'、'<='、'>='、'!='或'<>'
'等于'和'不等于'不尽可以比较数字还可以比较字符串。
字符串比较时，结果为真返回1，结果为假返回0。
'<=>'相当于'='，'<=>'还可以比较null值，当两个值都为null时返回值为1，当只有一个值为null时返回值为0。
8). is null 和 is not null
如：   aa is null  或  aa is  not null  
9). 
各种关键字、子句：
1).  distinct 关键字
distinct关键字用于去除重复的值。
当用select查询时，可能某一列中会有重复的值，如果使用简单的select语句，结果集中会把这些值都列出来，如果使用distinct关键字，结果集或去除重复的值，只保留第一次出现的那个条目。（如，某一列有多个'a'值，用distinct关键字后，只会保留第一个'aa'的条目，省略之后的）。
select distinct * from tableName ;
2). order by 语句
order by 语句用于根据指定的列对结果集进行排序。
可以根据多个列进行排序，多个列根据给出的顺序，优先级依次降低。
select * from table1 where ...... order by column1 DESC, column2  ASC ;
order by 默认升序排列结果，如果要逆序排列，使用DESC关键字指明，ASC是升序排列，可以省略。
order by只执行简单的排序，不会对结果集去除重复。
3).  group by 语句
group by 用来进行分组查询.
select * from table1 where ...... group by  column1,column2  [order by column3] ;
例：
select * from table1 group by name ;
name列中每个不同的值都是一个分组，相同值分在同一个分组，结果集中每个组内不会显示重复数值。即，例如如果一个表有name、score两列，name中存在重复的值，那么：
select * from table1 group by name ;
这个语句的结果中，重复的name条目只会显示第一个，其余的忽略。
select * , count(*) from table1 group by name ;
该语句可以统计每个分组有多少个条目，count(*)的值大于1的就是包含重复值的分组。
如果：
select * from table1 group by name,score ;
结果集中就会显示出所有name，包括重复的。
如果group by和order by 一块使用，要先执行group by，再执行order by。order by不会对group by的结果分组进行组内排序。如果group by忽略了某些重复条目，加上order by语句后这些条目也不会显示出来，因为先执行的group by 语句。
4). having 
having语句对分组后的数据进行筛选，作用在group by、where之后；而where语句在聚合前先进行筛选，然后对筛选之后的数据进行聚合分组。
如有一个表，数据如下：

执行语句：
SELECT * ,COUNT(*) FROM stu0 GROUP BY NAME HAVING score>83 ;
结果中，'Jack'分组中会有两个条目。而：
SELECT * ,COUNT(*) FROM stu0 WHERE score>83 GROUP BY NAME ;
结果中，'Jack'分组中只有一个条目。
即，having语句是对整个分组进行筛选的，只要组内有一个条目都满足having语句的条件，这个组就会满足having条件，就会出现在结果集中。。
例如上面的语句，'having score>83' ，虽然'Jack'分组中有一个条目不满足这个条件，但还有一个条目满足，所以这个分组满足having条件语句，这个'Jack'分组会出现在结果集中。
5).  as
6).  join
7).  

8). 

函数和存储过程
mysql有许多内置函数，也可以自己创建函数和存储过程。
函数只能用return语句返回单个值或表对象，而存储过程不能执行return语句，但能通过out语句返回多个值；函数可以嵌入到select等sql语句中使用，而存储过程不行；一般来说，函数只能实现简单的功能，而存储过程实现的功能比较复杂。
mysql内置的函数查mysql的函数表。

创建自定义函数(function)：
自定义函数语句应该用用begin-end语句块包含，函数结尾必须要有return语句。
1. 查看创建函数功能是否开启：
1). show variables like '%func%' ;
如果结果value处值为on，则已经开启；如果为off，没有开启，需要将其开启：
set global log_bin_trust_function_creators=1;
2). 查看所有函数   show function status ;
3). 查看具体函数  show create function func_name ;
4). 删除函数  drop function [if exists] func_name ;
5). 修改函数 alter function tunc_name 函数选项
修改函数或存储过程，只能修改它们的权限，mysql还不支持修改已创建函数/存储过程的代码，如要修改代码，先drop掉，再重新创建。
6).  
7).

2. 在函数体内部，语句结尾用分号结束，但是mysq遇到分号就会执行语句，而编写自定义函数时需要mysql执行一个完整的函数，而不是遇到分号就结束。所以，在编写函数之前，需要用delimiter关键字修改命令结束符，mysql默认的命令结束符就是分号，一般自定义函数时暂时改为'$$'或'//' 。函数结束后再改回分号。
delimiter关键字：
delimiter $$     将命令结束符改为'$$' 
delimiter //      将命令结束符改为 '//'
delimiter  ;        将命令结束符改回 ';'
delimiter语句更改命令结束符时，结尾不用加分号，
如：   delimiter //;  如果加了分号，那么命令结束符会改为'//;' 而不是'//' 。

3. 创建函数
create function function_name(参数列表) returns 返回值类型
多条函数语句应该包含在begin-end语句块中,如果只有一个语句可以不用begin-end。
参数由参数名和参数类型组成，之间用空格隔开；多个参数之间用逗号隔开。
参数列表可以省略。
注意：create 创建函数语句后面的returns是有s的，而函数体内部的返回值return是没有s的。
如果return语句的返回值类型不同于returns语句声明的，将会强制转换为与returns语句中的类型。
如：
delimiter $$
create function test_func(param1 int , parmam2  varchar )returns tinyint 
begin
return 1;
end $$
delimiter ;
或：
delimiter $$
create function test_func( )returns char(50) 
return (select * from table1 where c1=2);
$$
delimiter ;
4. 调用函数  
select func_name(实参列表) ;
5.定义变量
declare 变量名1[,变量名2] 变量类型 [DEFAULT VALUE] ;
如：
declare var1,var2,var3  int  default 100;
6.为变量赋值
1). 用set关键字为变量赋值
set 变量名1=值，变量名2=值...... ;
这里，所赋的值可以是一个赋值表达式。如：
set a=b+c;
2).  用select...into...语句为变量赋值
select A,B from table1 where id=3 into var1,var2;
或
select A,B into var1,var2 from table1 where id=3;
7. if语句
if  search_condition  then
statement_list ;
[else if  search_condition  then 
statement_list ;]
......
[else statement_list  ;]
end if ;
8. case语句
case case_value
when when_value then
statement_list ;
[when when_value then
statement_list ;  ........ ]
[else  statement_list ;]
end case ;
或：
case 
when search_condition then
statement_list ;
[when search_condition then
statement_list ;  ........ ]
[else  
statement_list ;]
end case ;
case后面不写判断条件，在when中给出条件判断语句。
如：
case age 
when 20 then
a=10;
end case ;
或：
case 
when age=20 then
a=10;
when name='Jhon' then
a=30;
end case ;
9. while 循环
[label : ] while search_condition  do
statement_list ;
end while [label]
10. loop循环
loop循环进行某些语句的重复执行
[label : ] loop
statement_list ;
end loop  [label] 
可以给循环设置一个标签，在leave和iterate语句跳出循环时会用到。如果使用标签，要将loop...end loop 语句块包含在标签内。
如：
sum1: loop
set a=a+1;
if a>=100 then
leave sum1;
end loop sum1;
11. repeat循环
有条件控制的循环语句，类似于for循环。
[label : ] repeat
statement_list
until  search_condition
end repeat  [label] 
循环体一直执行到until判断条件成立。
12. leave语句 (跳出循环)
leave 标签名; 
跳出循环，相当于break。
13. iterate语句（跳出本次循环，进入下一次循环）
iterate 标签名;
跳出本次循环，进入下一次循环，相当于continue。



创建自定义存储过程(procedure)：
自定义存储过程和自定义函数基本相同，把关键字function改为procedure即可。
存储过程的定义变量、变量赋值、条件控制语句，循环语句与函数的都相同。
存储过程没有returns/return语句！！！
delimiter $$ 
create procedure pro_name(参数列表)
begin 
statement_list ;
end $$
delimiter ;

1.调用存储过程用call关键字
call pro_name([实参列表]) ;
2. 查看所有存储过程  show procedure status
3. 查看特定存储过程  show create procedure pro_name 
4. 删除存储过程  drop procedure pro_name 
5. 更改存储过程  alter procedure pro_name  存储过程选项 ;
修改函数或存储过程，只能修改它们的权限，mysql还不支持修改已创建函数/存储过程的代码，如要修改代码，先drop掉，再重新创建。
6. 


Mysql归档日志binlog
binlog，二进制日志，记录对数据发生或潜在发生更改的sql语句，并以二进制形式保存在磁盘中。不会记录select语句或没有实际更新的增删改语句。可以根据日志查看mysql的更改历史，可以备份和回复mysql数据。
1.  查看binlog是否打开：
SHOW VARIABLES LIKE '%log_bin%'  ;
若log_bin项值为ON，则表示已开启二进制日志。
log_bin_index 参数：表示二进制索引文件的路径与名称。
2. 打开/关闭二进制日志的方法：
1).修改配置文件，在mysql安装目录下的data文件夹，修改my.ini，加入一句"log_bin=mysql-bin"即可。若要关闭二进制日志，将此语句注释掉即可。
修改完要重启mysql服务。mysql会自动创建两个日志文件。
上面的log-bin参数代表生成的日志文件的文件名，按照上面配置，生成的文件为"mysql-bin.000001"、"mysql-bin.000002"........
2). 直接在mysql命令行中更改：
该方法需要mysql版本5.6以上。
SET @@global.log_bin=1|0  （1为开启，0为关闭）。
3. 暂停二进制日志 ：SET sql_log_bin={0|1} ;
4. 查看binlog文件：
1).在命令行：
SHOW BINLOG EVENTS IN 'mysql-bin.000001'   
其中 log_name参数表示此条日志位于哪个文件中。
pos参数：此条日志在binlog中的开始位置。
Event_type：日志的类型。
Server_id：可以对照配置中的Server_id，表示此条日志是哪个服务器产生的。
End_log_pos：日志在binlog中的结束位置。
Info：日志的一些备注信息。
2). 用mysql自带的工具mysqlbinlog，Hi街在cmd中执行。"mysqlbinlog  所在路径/文件名 "
5. 利用binlog恢复数据：
1). 将数据直接回复到数据库中：
回复指定时间的数据：
mysqlbinlog  --start-date="2016-08-18 16:30:00" --stop-date="2016-08-18 17:00:00"  日志路径/mysql_bin.000001 | mysql -u root -p 123456 
回复指定开始/结束位置的数据：
mysqlbinlo g --start-position="4" --stop-position="123"  日志所在路径/日志文件名 | mysql -u root -p  password 
2). 将数据导出为sql文件：
将某时间段的操作数据导出为sql文件：
mysqlbinlog  --start-date="2016-08-18 16:30:00" --stop-date="2016-08-18 17:00:00"  日志所在路径/日志文件名 > 导出文件路径/导出文件名  
将指定开始/结束位置的操作数据导出为sql文件：
mysqlbinlo g --start-position="4" --stop-position="123"  日志所在路径/日志文件名 > 导出文件路径/导出文件名  
6. show master status;  查看当前日志的文件名和当前log的位置。
7. reset master; 清空现在所有的日志。
8. flush logs; 启用新的日志文件，一般备份完数据库后执行。




 


 


 
